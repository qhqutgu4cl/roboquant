/*
 * Copyright 2020-2024 Neural Layer
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.roboquant.strategies

import org.roboquant.common.Config
import org.roboquant.feeds.Event
import kotlin.random.Random

/**
 * Shuffle the signals generated by another strategy
 *
 * @see Strategy.shuffledSignals
 *
 * @property strategy the strategy to use before shuffling the resluting signals
 *
 */
class SignalShuffler(private val strategy: Strategy, val random: Random = Config.random) : Strategy {

    override fun generate(event: Event): List<Signal> {
        return strategy.generate(event).shuffled(random)
    }

}

/**
 * Convenience extension method to create a [AssetFilterStrategy].
 *
 * @see AssetFilterStrategy
 */
fun Strategy.shuffledSignals(random: Random = Config.random) = SignalShuffler(this, random)
