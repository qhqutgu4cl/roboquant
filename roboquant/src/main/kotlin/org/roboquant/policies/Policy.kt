/*
 * Copyright 2020-2022 Neural Layer
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.roboquant.policies

import org.roboquant.brokers.Account
import org.roboquant.common.Lifecycle
import org.roboquant.feeds.Event
import org.roboquant.metrics.MetricResults
import org.roboquant.orders.Order
import org.roboquant.strategies.Signal

/**
 * A policy is responsible for creating [Orders][Order], typically based on the [Signals][Signal] generated by a
 * strategy. Besides, turning signals into orders, a policy could also take care of:
 *
 * * signal conflicts, for example receive both a SELL and BUY signal for the same asset at the same time
 * * order management, for example how to deal with open orders
 * * portfolio construction, for example re-balancing of the portfolio based on some pre-defined risk parameters
 * * risk management, for example limit exposure to certain sectors
 *
 * Please note that a brokers which receives the orders that a Policy created, might not support all the different
 * order types.
 */
interface Policy : Lifecycle {

    /**
     * Act on the received [signals], the latest state of the [account] and the last known [event] and create zero or
     * more orders.
     */
    fun act(signals: List<Signal>, account: Account, event: Event): List<Order>

    /**
     * This will be invoked at each step in a run and provides the implemention with the opportunity to log additional
     * information. The default implementation is to return an empty map.
     *
     * This map should NOT be mutated after it has been returned by this method.
     */
    fun getMetrics(): MetricResults = emptyMap()

}